<?php
/**
 * Hazmat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * OpenAPI spec version: 1.18.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Hazmat Class Doc Comment
 *
 * @category Class
 * @description This container is used by the seller to provide hazardous material information for the listing.&lt;br&gt;&lt;br&gt;The &lt;b&gt;statements&lt;/b&gt; element is required to complete the hazmat section of a listing.&lt;br&gt;&lt;br&gt;The following elements are optional:&lt;ul&gt;&lt;li&gt;&lt;b&gt;pictograms&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;signalWord&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;component&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Hazmat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Hazmat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'component' => 'string',
        'pictograms' => 'string[]',
        'signal_word' => 'string',
        'statements' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'component' => null,
        'pictograms' => null,
        'signal_word' => null,
        'statements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'component' => 'component',
        'pictograms' => 'pictograms',
        'signal_word' => 'signalWord',
        'statements' => 'statements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'component' => 'setComponent',
        'pictograms' => 'setPictograms',
        'signal_word' => 'setSignalWord',
        'statements' => 'setStatements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'component' => 'getComponent',
        'pictograms' => 'getPictograms',
        'signal_word' => 'getSignalWord',
        'statements' => 'getStatements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['component'] = isset($data['component']) ? $data['component'] : null;
        $this->container['pictograms'] = isset($data['pictograms']) ? $data['pictograms'] : null;
        $this->container['signal_word'] = isset($data['signal_word']) ? $data['signal_word'] : null;
        $this->container['statements'] = isset($data['statements']) ? $data['statements'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets component
     *
     * @return string
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string $component This field is used by the seller to provide component information for the listing. For example, component information can provide the specific material of Hazmat concern.<br><br><b>Max length:</b> 120
     *
     * @return $this
     */
    public function setComponent($component)
    {
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets pictograms
     *
     * @return string[]
     */
    public function getPictograms()
    {
        return $this->container['pictograms'];
    }

    /**
     * Sets pictograms
     *
     * @param string[] $pictograms An array of comma-separated string values listing applicable pictogram code(s) for Hazard Pictogram(s).<br><br>If your product contains hazardous substances or mixtures, please select the values corresponding to the hazard pictograms that are stated on your product's Safety Data Sheet. The selected hazard information will be displayed on your listing.<br><br><span class=\"tablenote\"><b>Note:</b> Use the <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getHazardousMaterialsLabels \" target=\"_blank\">getHazardousMaterialsLabels</a> method in the Metadata API to find supported values for a specific marketplace/site. Refer to <a href=\"/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Pictogra\" target=\"_blank\">Pictogram sample values</a> for additional information.</span>
     *
     * @return $this
     */
    public function setPictograms($pictograms)
    {
        $this->container['pictograms'] = $pictograms;

        return $this;
    }

    /**
     * Gets signal_word
     *
     * @return string
     */
    public function getSignalWord()
    {
        return $this->container['signal_word'];
    }

    /**
     * Sets signal_word
     *
     * @param string $signal_word This field sets the signal word for hazardous materials in the listing.<br><br>If your product contains hazardous substances or mixtures, please select a value corresponding to the signal word that is stated on your product's Safety Data Sheet. The selected hazard information will be displayed on your listing.<br><br><span class=\"tablenote\"><b>Note:</b> Use the <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getHazardousMaterialsLabels \" target=\"_blank\">getHazardousMaterialsLabels</a> method in the <a href=\"/api-docs/sell/metadata/resources/methods \" target=\"_blank\">Metadata API</a> to find supported values for a specific marketplace/site. Refer to <a href=\"/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal\" target=\"_blank\">Signal word information</a> for additional information.</span>
     *
     * @return $this
     */
    public function setSignalWord($signal_word)
    {
        $this->container['signal_word'] = $signal_word;

        return $this;
    }

    /**
     * Gets statements
     *
     * @return string[]
     */
    public function getStatements()
    {
        return $this->container['statements'];
    }

    /**
     * Sets statements
     *
     * @param string[] $statements An array of comma-separated string values specifying applicable statement code(s) for hazard statement(s) for the listing.<br><br>If your product contains hazardous substances or mixtures, please select the values corresponding to the hazard statements that are stated on your product's Safety Data Sheet. The selected hazard information will be displayed on your listing.<br><br><span class=\"tablenote\"><b>Note:</b> Use the <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getHazardousMaterialsLabels \" target=\"_blank\">getHazardousMaterialsLabels</a> method in the Metadata API to find supported values for a specific marketplace/site. Refer to <a href=\"/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Hazard\" target=\"_blank\">Hazard statement sample values</a> for additional information.</span><br>This field is required if hazardous material information is provided for the listing.
     *
     * @return $this
     */
    public function setStatements($statements)
    {
        $this->container['statements'] = $statements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
